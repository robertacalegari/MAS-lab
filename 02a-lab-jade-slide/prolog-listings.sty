\usepackage{textcomp}
\usepackage{listings}
\usepackage{xcolor}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{ 
	backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
	basicstyle=\ttfamily,        % the size of the fonts that are used for the code
	breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
	breaklines=false,                 % sets automatic line breaking
%	captionpos=bottom,                    % sets the caption-position to bottom
	commentstyle=\color{mygreen},    % comment style
	escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
	extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
	frame=trBL,	                   % adds a frame around the code
	frameround=fttt,
	keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
	keywordstyle=\color{blue},       % keyword style
	%	language=Prolog,                 % the language of the code
	morekeywords={receive, setof, value, sender, now, send, is, assert, retract, retract_all},            % if you want to add more keywords to the set
	numbers=none,                    % where to put the line-numbers; possible values are (none, left, right)
	numbersep=5pt,                   % how far the line-numbers are from the code
	numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
	rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
	showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
	showstringspaces=false,          % underline spaces within strings only
	showtabs=false,                  % show tabs within strings adding particular underscores
	stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
	stringstyle=\color{mymauve},     % string literal style
	tabsize=2,                       % sets default tabsize to 2 spaces
	deletekeywords={Now, Time},            % if you want to delete keywords from the given language
	title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}

% --- ugly internals for language definition ---
%
\makeatletter

% initialisation of user macros
\newcommand\PrologPredicateStyle{}
\newcommand\PrologVarStyle{}
\newcommand\PrologAnonymVarStyle{}
\newcommand\PrologAtomStyle{}
\newcommand\PrologOtherStyle{}
\newcommand\PrologCommentStyle{}

% useful switches (to keep track of context)
\newif\ifpredicate@prolog@
\newif\ifwithinparens@prolog@

% save definition of underscore for test
\lst@SaveOutputDef{`_}\underscore@prolog

% local variables
\newcount\currentchar@prolog

\newcommand\@testChar@prolog%
{%
	% if we're in processing mode...
	\ifnum\lst@mode=\lst@Pmode%
	\detectTypeAndHighlight@prolog%
	\else
	% ... or within parentheses
	\ifwithinparens@prolog@%
	\detectTypeAndHighlight@prolog%
	\fi
	\fi
	% Some housekeeping...
	\global\predicate@prolog@false%
}

% helper macros
\newcommand\detectTypeAndHighlight@prolog
{%
	% First, assume that we have an atom.
	\def\lst@thestyle{\PrologAtomStyle}%
	% Test whether we have a predicate and modify the style accordingly.
	\ifpredicate@prolog@%
	\def\lst@thestyle{\PrologPredicateStyle}%
	\else
	% Test whether we have a predicate and modify the style accordingly.
	\expandafter\splitfirstchar@prolog\expandafter{\the\lst@token}%
	% Check whether the identifier starts by an underscore.
	\expandafter\ifx\@testChar@prolog\underscore@prolog%
	% Check whether the identifier is '_' (anonymous variable)
	\ifnum\lst@length=1%
	\let\lst@thestyle\PrologAnonymVarStyle%
	\else
	\let\lst@thestyle\PrologVarStyle%
	\fi
	\else
	% Check whether the identifier starts by a capital letter.
	\currentchar@prolog=65
	\loop
	\expandafter\ifnum\expandafter`\@testChar@prolog=\currentchar@prolog%
	\let\lst@thestyle\PrologVarStyle%
	\let\iterate\relax
	\fi
	\advance \currentchar@prolog by 1
	\unless\ifnum\currentchar@prolog>90
	\repeat
	\fi
	\fi
}
\newcommand\splitfirstchar@prolog{}
\def\splitfirstchar@prolog#1{\@splitfirstchar@prolog#1\relax}
\newcommand\@splitfirstchar@prolog{}
\def\@splitfirstchar@prolog#1#2\relax{\def\@testChar@prolog{#1}}

% helper macro for () delimiters
\def\beginlstdelim#1#2%
{%
	\def\endlstdelim{\PrologOtherStyle #2\egroup}%
	{\PrologOtherStyle #1}%
	\global\predicate@prolog@false%
	\withinparens@prolog@true%
	\bgroup\aftergroup\endlstdelim%
}

% language name
\newcommand\lang@prolog{Prolog-pretty}
% ``normalised'' language name
\expandafter\lst@NormedDef\expandafter\normlang@prolog%
\expandafter{\lang@prolog}

% language definition
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\lang@prolog}
{%
	language            = Prolog,
	keywords            = {},      % reset all preset keywords
	showstringspaces    = false,
	alsoletter          = (,
	alsoother           = @$,
	moredelim           = **[is][\beginlstdelim{(}{)}]{(}{)},
	MoreSelectCharTable =
	\lst@DefSaveDef{`(}\opparen@prolog{\global\predicate@prolog@true\opparen@prolog},
}

% Hooking into listings to test each ``identifier''
\newcommand\@ddedToOutput@prolog\relax
\lst@AddToHook{Output}{\@ddedToOutput@prolog}

\lst@AddToHook{PreInit}
{%
	\ifx\lst@language\normlang@prolog%
	\let\@ddedToOutput@prolog\@testChar@prolog%
	\fi
}

\lst@AddToHook{DeInit}{\renewcommand\@ddedToOutput@prolog{}}

\makeatother
%
% --- end of ugly internals ---


% --- definition of a custom style similar to that of Pygments ---
% custom colors
\definecolor{PrologPredicate}{RGB}{000,031,255}
\definecolor{PrologVar}      {RGB}{024,021,125}
\definecolor{PrologAnonymVar}{RGB}{000,127,000}
\definecolor{PrologAtom}     {RGB}{186,032,032}
\definecolor{PrologComment}  {RGB}{063,128,127}
\definecolor{PrologOther}    {RGB}{000,000,000}

% redefinition of user macros for Prolog style
\renewcommand\PrologPredicateStyle{\color{PrologPredicate}}
\renewcommand\PrologVarStyle{\color{PrologVar}}
\renewcommand\PrologAnonymVarStyle{\color{PrologAnonymVar}}
\renewcommand\PrologAtomStyle{\color{PrologAtom}}
\renewcommand\PrologCommentStyle{\itshape\color{PrologComment}}
\renewcommand\PrologOtherStyle{\color{PrologOther}}

% custom style definition 
\lstdefinestyle{Prolog-cool}
{
	language     = Prolog-pretty,
	upquote      = true,
	stringstyle  = \PrologAtomStyle,
	commentstyle = \PrologCommentStyle,
	literate     =
	{:-}{{\PrologOtherStyle :-}}2
	{,}{{\PrologOtherStyle ,}}1
	{.}{{\PrologOtherStyle .}}1
}

\newcommand{\plinline}[1]{\lstinline[style=Prolog-cool]|#1|}